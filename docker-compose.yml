# this docker-compose.yml file is used to define and manage multiple container in a 
# docker enviroment 

# version line below specifies which version of the docker compose file format is being used
version: '3'

# services section defines the different container or serice you want to run
services:
# setting up db for traces but can also be for other things to like metrics
  elastic:
    # native docker package for elastic search
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
    # running the db in a single node
    environment:
      - discovery.type=single-node
    # set up the ports needed to run elastic search
    ports:
      - "9200:9200"
      - "9300:9300"

  # this service is related to our promotheus third party configuration
  prometheus:
    # defines which image to be used for service 
      #2 ways to specify image (pre-built vs custom image) - this is a pre-built
      #the line prom/prometheus specifies docker to build an containerized version of the prometheus
      # application (an image), the line is a reference to a native docker package 
    image: prom/prometheus
    # volumes provide a way for docker to manage data and state in docker container
      # serveral ways to persist data: 
        # named volumes (a volume with specifc name that can be used by many container, usually a DB) 
        # host mounts (mount a dir or file from host machine into container, provides the container with a specifc file or dir you want )
        # anonymus volume (created automatically by docker compose, primiarily used for temp data)
    volumes: 
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    # defines the ports that will exposed from a container to the host machine for use by host or other container
    # binds a specifc service to a port on local machine
    # 2 formats: 
      # host port mapping (8080:80) - (hostPort:containerPort): maps a host port directly to container port, acts by forwarding the message to the container port
      # container port mapping (80) - (container-port): if you don't specify a host port, docker will automatically assign a random local host to you
    ports: 
      - 9090:9090

    # same structure as above
    redis:
      image: redis
      ports:
        - 6379:6379

    # same structure as above
    jaeger:
      image: jaegertracing/all-in-one
      # Can include environment variable to aid in the functioning of the containerized application
      environment:
      # tells jaeger to write to elastic search for db
       - SPAN_STORAGE_TYPE=elasticsearch
      #  this is the URL to write the traces to 
       - ES_SERVER_URLS=http://elastic:9200
      ports: 
        - 5775:5775
        - 6831:6831
        - 6832:6832
        - 5778:5778
        - 16686:16686
        - 14268:14268
        - 14250:14250
        - 9411:9411

      # the deploy section is used to specify configurations related to deploying and manging servuces in 
      # swarm mode cluster (native docker version of kubernetes, simpler and more light weight but less features )
      deploy:
        # restart-policy: defines how to restart a service
        restart_policy:
          condition: on-failure
    
    # same structure as above
    # Gave our our service a name caled colelctor agent
      collector-agent:
        image: otel/opentelemetry-collector:0.29.0
        # mapping the command path to a local configuration
        volumes: 
          - ./config/collector-agent.yml:/etc/otel-collector-config.yaml
        # specifying how the collector's configuration
        command: ["--config=/etc/otel-collector-config.yaml"]
        ports:
          # - "1888:1888"   # pprof extension
          # - "8888:8888"   # Prometheus metrics exposed by the collector
          # - "8889:8889"   # Prometheus exporter metrics
          # - "13133:13133" # health_check extension
          - "4318:4318"        # OTLP HTTP receiver
          # - "55670:55679" # zpages extension

      collector-gateway:
        image: otel/opentelemetry-collector-contrib:0.29.0
        # mapping the command path to a local configuration
        volumes: 
          - ./config/collector-gateway.yml:/etc/otel-collector-config.yaml
        # specifying how the collector's configuration
        command: ["--config=/etc/otel-collector-config.yaml"]
        ports:
          - "1888:1888"   # pprof extension
          - "8888:8888"   # Prometheus metrics exposed by the collector
          - "8889:8889"   # Prometheus exporter metrics
          - "13133:13133" # health_check extension
          - "4319:4319"   # OTLP HTTP receiver
          - "4320:4320"   # OTLP gRPC receiver
          - "55670:55679" # zpages extension



      



